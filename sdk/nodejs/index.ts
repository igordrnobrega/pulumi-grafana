// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./alertNotification";
export * from "./builtinRoleAssignment";
export * from "./dashboard";
export * from "./dashboardPermission";
export * from "./dataSource";
export * from "./folder";
export * from "./folderPermission";
export * from "./organization";
export * from "./provider";
export * from "./role";
export * from "./team";
export * from "./teamPreferences";
export * from "./user";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { AlertNotification } from "./alertNotification";
import { BuiltinRoleAssignment } from "./builtinRoleAssignment";
import { Dashboard } from "./dashboard";
import { DashboardPermission } from "./dashboardPermission";
import { DataSource } from "./dataSource";
import { Folder } from "./folder";
import { FolderPermission } from "./folderPermission";
import { Organization } from "./organization";
import { Role } from "./role";
import { Team } from "./team";
import { TeamPreferences } from "./teamPreferences";
import { User } from "./user";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "grafana:index/alertNotification:AlertNotification":
                return new AlertNotification(name, <any>undefined, { urn })
            case "grafana:index/builtinRoleAssignment:BuiltinRoleAssignment":
                return new BuiltinRoleAssignment(name, <any>undefined, { urn })
            case "grafana:index/dashboard:Dashboard":
                return new Dashboard(name, <any>undefined, { urn })
            case "grafana:index/dashboardPermission:DashboardPermission":
                return new DashboardPermission(name, <any>undefined, { urn })
            case "grafana:index/dataSource:DataSource":
                return new DataSource(name, <any>undefined, { urn })
            case "grafana:index/folder:Folder":
                return new Folder(name, <any>undefined, { urn })
            case "grafana:index/folderPermission:FolderPermission":
                return new FolderPermission(name, <any>undefined, { urn })
            case "grafana:index/organization:Organization":
                return new Organization(name, <any>undefined, { urn })
            case "grafana:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "grafana:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "grafana:index/teamPreferences:TeamPreferences":
                return new TeamPreferences(name, <any>undefined, { urn })
            case "grafana:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("grafana", "index/alertNotification", _module)
pulumi.runtime.registerResourceModule("grafana", "index/builtinRoleAssignment", _module)
pulumi.runtime.registerResourceModule("grafana", "index/dashboard", _module)
pulumi.runtime.registerResourceModule("grafana", "index/dashboardPermission", _module)
pulumi.runtime.registerResourceModule("grafana", "index/dataSource", _module)
pulumi.runtime.registerResourceModule("grafana", "index/folder", _module)
pulumi.runtime.registerResourceModule("grafana", "index/folderPermission", _module)
pulumi.runtime.registerResourceModule("grafana", "index/organization", _module)
pulumi.runtime.registerResourceModule("grafana", "index/role", _module)
pulumi.runtime.registerResourceModule("grafana", "index/team", _module)
pulumi.runtime.registerResourceModule("grafana", "index/teamPreferences", _module)
pulumi.runtime.registerResourceModule("grafana", "index/user", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("grafana", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:grafana") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
