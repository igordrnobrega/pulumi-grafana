// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Grafana
{
    [GrafanaResourceType("grafana:index/dataSource:DataSource")]
    public partial class DataSource : Pulumi.CustomResource
    {
        /// <summary>
        /// The method by which Grafana will access the data source: `proxy` or `direct`.
        /// </summary>
        [Output("accessMode")]
        public Output<string?> AccessMode { get; private set; } = null!;

        /// <summary>
        /// Whether to enable basic auth for the data source.
        /// </summary>
        [Output("basicAuthEnabled")]
        public Output<bool?> BasicAuthEnabled { get; private set; } = null!;

        /// <summary>
        /// Basic auth password.
        /// </summary>
        [Output("basicAuthPassword")]
        public Output<string?> BasicAuthPassword { get; private set; } = null!;

        /// <summary>
        /// Basic auth username.
        /// </summary>
        [Output("basicAuthUsername")]
        public Output<string?> BasicAuthUsername { get; private set; } = null!;

        /// <summary>
        /// (Required by some data source types) The name of the database to use on the selected data source server.
        /// </summary>
        [Output("databaseName")]
        public Output<string?> DatabaseName { get; private set; } = null!;

        /// <summary>
        /// Whether to set the data source as default. This should only be `true` to a single data source.
        /// </summary>
        [Output("isDefault")]
        public Output<bool?> IsDefault { get; private set; } = null!;

        /// <summary>
        /// (Required by some data source types)
        /// </summary>
        [Output("jsonDatas")]
        public Output<ImmutableArray<Outputs.DataSourceJsonData>> JsonDatas { get; private set; } = null!;

        /// <summary>
        /// A unique name for the data source.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// (Required by some data source types) The password to use to authenticate to the data source.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        [Output("secureJsonDatas")]
        public Output<ImmutableArray<Outputs.DataSourceSecureJsonData>> SecureJsonDatas { get; private set; } = null!;

        /// <summary>
        /// The data source type. Must be one of the supported data source keywords.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The URL for the data source. The type of URL required varies depending on the chosen data source type.
        /// </summary>
        [Output("url")]
        public Output<string?> Url { get; private set; } = null!;

        /// <summary>
        /// (Required by some data source types) The username to use to authenticate to the data source.
        /// </summary>
        [Output("username")]
        public Output<string?> Username { get; private set; } = null!;


        /// <summary>
        /// Create a DataSource resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DataSource(string name, DataSourceArgs args, CustomResourceOptions? options = null)
            : base("grafana:index/dataSource:DataSource", name, args ?? new DataSourceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DataSource(string name, Input<string> id, DataSourceState? state = null, CustomResourceOptions? options = null)
            : base("grafana:index/dataSource:DataSource", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DataSource resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DataSource Get(string name, Input<string> id, DataSourceState? state = null, CustomResourceOptions? options = null)
        {
            return new DataSource(name, id, state, options);
        }
    }

    public sealed class DataSourceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The method by which Grafana will access the data source: `proxy` or `direct`.
        /// </summary>
        [Input("accessMode")]
        public Input<string>? AccessMode { get; set; }

        /// <summary>
        /// Whether to enable basic auth for the data source.
        /// </summary>
        [Input("basicAuthEnabled")]
        public Input<bool>? BasicAuthEnabled { get; set; }

        /// <summary>
        /// Basic auth password.
        /// </summary>
        [Input("basicAuthPassword")]
        public Input<string>? BasicAuthPassword { get; set; }

        /// <summary>
        /// Basic auth username.
        /// </summary>
        [Input("basicAuthUsername")]
        public Input<string>? BasicAuthUsername { get; set; }

        /// <summary>
        /// (Required by some data source types) The name of the database to use on the selected data source server.
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// Whether to set the data source as default. This should only be `true` to a single data source.
        /// </summary>
        [Input("isDefault")]
        public Input<bool>? IsDefault { get; set; }

        [Input("jsonDatas")]
        private InputList<Inputs.DataSourceJsonDataArgs>? _jsonDatas;

        /// <summary>
        /// (Required by some data source types)
        /// </summary>
        public InputList<Inputs.DataSourceJsonDataArgs> JsonDatas
        {
            get => _jsonDatas ?? (_jsonDatas = new InputList<Inputs.DataSourceJsonDataArgs>());
            set => _jsonDatas = value;
        }

        /// <summary>
        /// A unique name for the data source.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (Required by some data source types) The password to use to authenticate to the data source.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        [Input("secureJsonDatas")]
        private InputList<Inputs.DataSourceSecureJsonDataArgs>? _secureJsonDatas;
        public InputList<Inputs.DataSourceSecureJsonDataArgs> SecureJsonDatas
        {
            get => _secureJsonDatas ?? (_secureJsonDatas = new InputList<Inputs.DataSourceSecureJsonDataArgs>());
            set => _secureJsonDatas = value;
        }

        /// <summary>
        /// The data source type. Must be one of the supported data source keywords.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// The URL for the data source. The type of URL required varies depending on the chosen data source type.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// (Required by some data source types) The username to use to authenticate to the data source.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public DataSourceArgs()
        {
        }
    }

    public sealed class DataSourceState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The method by which Grafana will access the data source: `proxy` or `direct`.
        /// </summary>
        [Input("accessMode")]
        public Input<string>? AccessMode { get; set; }

        /// <summary>
        /// Whether to enable basic auth for the data source.
        /// </summary>
        [Input("basicAuthEnabled")]
        public Input<bool>? BasicAuthEnabled { get; set; }

        /// <summary>
        /// Basic auth password.
        /// </summary>
        [Input("basicAuthPassword")]
        public Input<string>? BasicAuthPassword { get; set; }

        /// <summary>
        /// Basic auth username.
        /// </summary>
        [Input("basicAuthUsername")]
        public Input<string>? BasicAuthUsername { get; set; }

        /// <summary>
        /// (Required by some data source types) The name of the database to use on the selected data source server.
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// Whether to set the data source as default. This should only be `true` to a single data source.
        /// </summary>
        [Input("isDefault")]
        public Input<bool>? IsDefault { get; set; }

        [Input("jsonDatas")]
        private InputList<Inputs.DataSourceJsonDataGetArgs>? _jsonDatas;

        /// <summary>
        /// (Required by some data source types)
        /// </summary>
        public InputList<Inputs.DataSourceJsonDataGetArgs> JsonDatas
        {
            get => _jsonDatas ?? (_jsonDatas = new InputList<Inputs.DataSourceJsonDataGetArgs>());
            set => _jsonDatas = value;
        }

        /// <summary>
        /// A unique name for the data source.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (Required by some data source types) The password to use to authenticate to the data source.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        [Input("secureJsonDatas")]
        private InputList<Inputs.DataSourceSecureJsonDataGetArgs>? _secureJsonDatas;
        public InputList<Inputs.DataSourceSecureJsonDataGetArgs> SecureJsonDatas
        {
            get => _secureJsonDatas ?? (_secureJsonDatas = new InputList<Inputs.DataSourceSecureJsonDataGetArgs>());
            set => _secureJsonDatas = value;
        }

        /// <summary>
        /// The data source type. Must be one of the supported data source keywords.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The URL for the data source. The type of URL required varies depending on the chosen data source type.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// (Required by some data source types) The username to use to authenticate to the data source.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public DataSourceState()
        {
        }
    }
}
