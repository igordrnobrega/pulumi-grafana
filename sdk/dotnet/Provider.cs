// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Grafana
{
    /// <summary>
    /// The provider type for the grafana package. By default, resources use package-wide configuration
    /// settings, however an explicit `Provider` instance may be created and passed during resource
    /// construction to achieve fine-grained programmatic control over provider settings. See the
    /// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
    /// </summary>
    [GrafanaResourceType("pulumi:providers:grafana")]
    public partial class Provider : Pulumi.ProviderResource
    {
        /// <summary>
        /// API token or basic auth username:password. May alternatively be set via the `GRAFANA_AUTH` environment variable.
        /// </summary>
        [Output("auth")]
        public Output<string> Auth { get; private set; } = null!;

        /// <summary>
        /// Certificate CA bundle to use to verify the Grafana server's certificate. May alternatively be set via the
        /// `GRAFANA_CA_CERT` environment variable.
        /// </summary>
        [Output("caCert")]
        public Output<string?> CaCert { get; private set; } = null!;

        /// <summary>
        /// Client TLS certificate file to use to authenticate to the Grafana server. May alternatively be set via the
        /// `GRAFANA_TLS_CERT` environment variable.
        /// </summary>
        [Output("tlsCert")]
        public Output<string?> TlsCert { get; private set; } = null!;

        /// <summary>
        /// Client TLS key file to use to authenticate to the Grafana server. May alternatively be set via the `GRAFANA_TLS_CERT`
        /// environment variable.
        /// </summary>
        [Output("tlsKey")]
        public Output<string?> TlsKey { get; private set; } = null!;

        /// <summary>
        /// The root URL of a Grafana server. May alternatively be set via the `GRAFANA_URL` environment variable.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a Provider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Provider(string name, ProviderArgs args, CustomResourceOptions? options = null)
            : base("grafana", name, args ?? new ProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class ProviderArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// API token or basic auth username:password. May alternatively be set via the `GRAFANA_AUTH` environment variable.
        /// </summary>
        [Input("auth", required: true)]
        public Input<string> Auth { get; set; } = null!;

        /// <summary>
        /// Certificate CA bundle to use to verify the Grafana server's certificate. May alternatively be set via the
        /// `GRAFANA_CA_CERT` environment variable.
        /// </summary>
        [Input("caCert")]
        public Input<string>? CaCert { get; set; }

        /// <summary>
        /// Skip TLS certificate verification. May alternatively be set via the `GRAFANA_INSECURE_SKIP_VERIFY` environment variable.
        /// </summary>
        [Input("insecureSkipVerify", json: true)]
        public Input<bool>? InsecureSkipVerify { get; set; }

        /// <summary>
        /// The organization id to operate on within grafana. May alternatively be set via the `GRAFANA_ORG_ID` environment
        /// variable.
        /// </summary>
        [Input("orgId", required: true, json: true)]
        public Input<int> OrgId { get; set; } = null!;

        /// <summary>
        /// Client TLS certificate file to use to authenticate to the Grafana server. May alternatively be set via the
        /// `GRAFANA_TLS_CERT` environment variable.
        /// </summary>
        [Input("tlsCert")]
        public Input<string>? TlsCert { get; set; }

        /// <summary>
        /// Client TLS key file to use to authenticate to the Grafana server. May alternatively be set via the `GRAFANA_TLS_CERT`
        /// environment variable.
        /// </summary>
        [Input("tlsKey")]
        public Input<string>? TlsKey { get; set; }

        /// <summary>
        /// The root URL of a Grafana server. May alternatively be set via the `GRAFANA_URL` environment variable.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public ProviderArgs()
        {
        }
    }
}
