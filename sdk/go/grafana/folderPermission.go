// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type FolderPermission struct {
	pulumi.CustomResourceState

	// The UID of the folder.
	FolderUid pulumi.StringOutput `pulumi:"folderUid"`
	// The permission items to add/update. Items that are omitted from the list will be removed.
	Permissions FolderPermissionPermissionArrayOutput `pulumi:"permissions"`
}

// NewFolderPermission registers a new resource with the given unique name, arguments, and options.
func NewFolderPermission(ctx *pulumi.Context,
	name string, args *FolderPermissionArgs, opts ...pulumi.ResourceOption) (*FolderPermission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FolderUid == nil {
		return nil, errors.New("invalid value for required argument 'FolderUid'")
	}
	if args.Permissions == nil {
		return nil, errors.New("invalid value for required argument 'Permissions'")
	}
	var resource FolderPermission
	err := ctx.RegisterResource("grafana:index/folderPermission:FolderPermission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFolderPermission gets an existing FolderPermission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFolderPermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FolderPermissionState, opts ...pulumi.ResourceOption) (*FolderPermission, error) {
	var resource FolderPermission
	err := ctx.ReadResource("grafana:index/folderPermission:FolderPermission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FolderPermission resources.
type folderPermissionState struct {
	// The UID of the folder.
	FolderUid *string `pulumi:"folderUid"`
	// The permission items to add/update. Items that are omitted from the list will be removed.
	Permissions []FolderPermissionPermission `pulumi:"permissions"`
}

type FolderPermissionState struct {
	// The UID of the folder.
	FolderUid pulumi.StringPtrInput
	// The permission items to add/update. Items that are omitted from the list will be removed.
	Permissions FolderPermissionPermissionArrayInput
}

func (FolderPermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*folderPermissionState)(nil)).Elem()
}

type folderPermissionArgs struct {
	// The UID of the folder.
	FolderUid string `pulumi:"folderUid"`
	// The permission items to add/update. Items that are omitted from the list will be removed.
	Permissions []FolderPermissionPermission `pulumi:"permissions"`
}

// The set of arguments for constructing a FolderPermission resource.
type FolderPermissionArgs struct {
	// The UID of the folder.
	FolderUid pulumi.StringInput
	// The permission items to add/update. Items that are omitted from the list will be removed.
	Permissions FolderPermissionPermissionArrayInput
}

func (FolderPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*folderPermissionArgs)(nil)).Elem()
}

type FolderPermissionInput interface {
	pulumi.Input

	ToFolderPermissionOutput() FolderPermissionOutput
	ToFolderPermissionOutputWithContext(ctx context.Context) FolderPermissionOutput
}

func (*FolderPermission) ElementType() reflect.Type {
	return reflect.TypeOf((*FolderPermission)(nil))
}

func (i *FolderPermission) ToFolderPermissionOutput() FolderPermissionOutput {
	return i.ToFolderPermissionOutputWithContext(context.Background())
}

func (i *FolderPermission) ToFolderPermissionOutputWithContext(ctx context.Context) FolderPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderPermissionOutput)
}

func (i *FolderPermission) ToFolderPermissionPtrOutput() FolderPermissionPtrOutput {
	return i.ToFolderPermissionPtrOutputWithContext(context.Background())
}

func (i *FolderPermission) ToFolderPermissionPtrOutputWithContext(ctx context.Context) FolderPermissionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderPermissionPtrOutput)
}

type FolderPermissionPtrInput interface {
	pulumi.Input

	ToFolderPermissionPtrOutput() FolderPermissionPtrOutput
	ToFolderPermissionPtrOutputWithContext(ctx context.Context) FolderPermissionPtrOutput
}

type folderPermissionPtrType FolderPermissionArgs

func (*folderPermissionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FolderPermission)(nil))
}

func (i *folderPermissionPtrType) ToFolderPermissionPtrOutput() FolderPermissionPtrOutput {
	return i.ToFolderPermissionPtrOutputWithContext(context.Background())
}

func (i *folderPermissionPtrType) ToFolderPermissionPtrOutputWithContext(ctx context.Context) FolderPermissionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderPermissionPtrOutput)
}

// FolderPermissionArrayInput is an input type that accepts FolderPermissionArray and FolderPermissionArrayOutput values.
// You can construct a concrete instance of `FolderPermissionArrayInput` via:
//
//          FolderPermissionArray{ FolderPermissionArgs{...} }
type FolderPermissionArrayInput interface {
	pulumi.Input

	ToFolderPermissionArrayOutput() FolderPermissionArrayOutput
	ToFolderPermissionArrayOutputWithContext(context.Context) FolderPermissionArrayOutput
}

type FolderPermissionArray []FolderPermissionInput

func (FolderPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*FolderPermission)(nil))
}

func (i FolderPermissionArray) ToFolderPermissionArrayOutput() FolderPermissionArrayOutput {
	return i.ToFolderPermissionArrayOutputWithContext(context.Background())
}

func (i FolderPermissionArray) ToFolderPermissionArrayOutputWithContext(ctx context.Context) FolderPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderPermissionArrayOutput)
}

// FolderPermissionMapInput is an input type that accepts FolderPermissionMap and FolderPermissionMapOutput values.
// You can construct a concrete instance of `FolderPermissionMapInput` via:
//
//          FolderPermissionMap{ "key": FolderPermissionArgs{...} }
type FolderPermissionMapInput interface {
	pulumi.Input

	ToFolderPermissionMapOutput() FolderPermissionMapOutput
	ToFolderPermissionMapOutputWithContext(context.Context) FolderPermissionMapOutput
}

type FolderPermissionMap map[string]FolderPermissionInput

func (FolderPermissionMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*FolderPermission)(nil))
}

func (i FolderPermissionMap) ToFolderPermissionMapOutput() FolderPermissionMapOutput {
	return i.ToFolderPermissionMapOutputWithContext(context.Background())
}

func (i FolderPermissionMap) ToFolderPermissionMapOutputWithContext(ctx context.Context) FolderPermissionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderPermissionMapOutput)
}

type FolderPermissionOutput struct {
	*pulumi.OutputState
}

func (FolderPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FolderPermission)(nil))
}

func (o FolderPermissionOutput) ToFolderPermissionOutput() FolderPermissionOutput {
	return o
}

func (o FolderPermissionOutput) ToFolderPermissionOutputWithContext(ctx context.Context) FolderPermissionOutput {
	return o
}

func (o FolderPermissionOutput) ToFolderPermissionPtrOutput() FolderPermissionPtrOutput {
	return o.ToFolderPermissionPtrOutputWithContext(context.Background())
}

func (o FolderPermissionOutput) ToFolderPermissionPtrOutputWithContext(ctx context.Context) FolderPermissionPtrOutput {
	return o.ApplyT(func(v FolderPermission) *FolderPermission {
		return &v
	}).(FolderPermissionPtrOutput)
}

type FolderPermissionPtrOutput struct {
	*pulumi.OutputState
}

func (FolderPermissionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FolderPermission)(nil))
}

func (o FolderPermissionPtrOutput) ToFolderPermissionPtrOutput() FolderPermissionPtrOutput {
	return o
}

func (o FolderPermissionPtrOutput) ToFolderPermissionPtrOutputWithContext(ctx context.Context) FolderPermissionPtrOutput {
	return o
}

type FolderPermissionArrayOutput struct{ *pulumi.OutputState }

func (FolderPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FolderPermission)(nil))
}

func (o FolderPermissionArrayOutput) ToFolderPermissionArrayOutput() FolderPermissionArrayOutput {
	return o
}

func (o FolderPermissionArrayOutput) ToFolderPermissionArrayOutputWithContext(ctx context.Context) FolderPermissionArrayOutput {
	return o
}

func (o FolderPermissionArrayOutput) Index(i pulumi.IntInput) FolderPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FolderPermission {
		return vs[0].([]FolderPermission)[vs[1].(int)]
	}).(FolderPermissionOutput)
}

type FolderPermissionMapOutput struct{ *pulumi.OutputState }

func (FolderPermissionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]FolderPermission)(nil))
}

func (o FolderPermissionMapOutput) ToFolderPermissionMapOutput() FolderPermissionMapOutput {
	return o
}

func (o FolderPermissionMapOutput) ToFolderPermissionMapOutputWithContext(ctx context.Context) FolderPermissionMapOutput {
	return o
}

func (o FolderPermissionMapOutput) MapIndex(k pulumi.StringInput) FolderPermissionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) FolderPermission {
		return vs[0].(map[string]FolderPermission)[vs[1].(string)]
	}).(FolderPermissionOutput)
}

func init() {
	pulumi.RegisterOutputType(FolderPermissionOutput{})
	pulumi.RegisterOutputType(FolderPermissionPtrOutput{})
	pulumi.RegisterOutputType(FolderPermissionArrayOutput{})
	pulumi.RegisterOutputType(FolderPermissionMapOutput{})
}
