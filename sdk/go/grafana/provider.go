// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The provider type for the grafana package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// API token or basic auth username:password. May alternatively be set via the `GRAFANA_AUTH` environment variable.
	Auth pulumi.StringOutput `pulumi:"auth"`
	// Certificate CA bundle to use to verify the Grafana server's certificate. May alternatively be set via the
	// `GRAFANA_CA_CERT` environment variable.
	CaCert pulumi.StringPtrOutput `pulumi:"caCert"`
	// Client TLS certificate file to use to authenticate to the Grafana server. May alternatively be set via the
	// `GRAFANA_TLS_CERT` environment variable.
	TlsCert pulumi.StringPtrOutput `pulumi:"tlsCert"`
	// Client TLS key file to use to authenticate to the Grafana server. May alternatively be set via the `GRAFANA_TLS_CERT`
	// environment variable.
	TlsKey pulumi.StringPtrOutput `pulumi:"tlsKey"`
	// The root URL of a Grafana server. May alternatively be set via the `GRAFANA_URL` environment variable.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Auth == nil {
		return nil, errors.New("invalid value for required argument 'Auth'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:grafana", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// API token or basic auth username:password. May alternatively be set via the `GRAFANA_AUTH` environment variable.
	Auth string `pulumi:"auth"`
	// Certificate CA bundle to use to verify the Grafana server's certificate. May alternatively be set via the
	// `GRAFANA_CA_CERT` environment variable.
	CaCert *string `pulumi:"caCert"`
	// Skip TLS certificate verification. May alternatively be set via the `GRAFANA_INSECURE_SKIP_VERIFY` environment variable.
	InsecureSkipVerify *bool `pulumi:"insecureSkipVerify"`
	// The organization id to operate on within grafana. May alternatively be set via the `GRAFANA_ORG_ID` environment
	// variable.
	OrgId int `pulumi:"orgId"`
	// Client TLS certificate file to use to authenticate to the Grafana server. May alternatively be set via the
	// `GRAFANA_TLS_CERT` environment variable.
	TlsCert *string `pulumi:"tlsCert"`
	// Client TLS key file to use to authenticate to the Grafana server. May alternatively be set via the `GRAFANA_TLS_CERT`
	// environment variable.
	TlsKey *string `pulumi:"tlsKey"`
	// The root URL of a Grafana server. May alternatively be set via the `GRAFANA_URL` environment variable.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// API token or basic auth username:password. May alternatively be set via the `GRAFANA_AUTH` environment variable.
	Auth pulumi.StringInput
	// Certificate CA bundle to use to verify the Grafana server's certificate. May alternatively be set via the
	// `GRAFANA_CA_CERT` environment variable.
	CaCert pulumi.StringPtrInput
	// Skip TLS certificate verification. May alternatively be set via the `GRAFANA_INSECURE_SKIP_VERIFY` environment variable.
	InsecureSkipVerify pulumi.BoolPtrInput
	// The organization id to operate on within grafana. May alternatively be set via the `GRAFANA_ORG_ID` environment
	// variable.
	OrgId pulumi.IntInput
	// Client TLS certificate file to use to authenticate to the Grafana server. May alternatively be set via the
	// `GRAFANA_TLS_CERT` environment variable.
	TlsCert pulumi.StringPtrInput
	// Client TLS key file to use to authenticate to the Grafana server. May alternatively be set via the `GRAFANA_TLS_CERT`
	// environment variable.
	TlsKey pulumi.StringPtrInput
	// The root URL of a Grafana server. May alternatively be set via the `GRAFANA_URL` environment variable.
	Url pulumi.StringInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((*Provider)(nil))
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

func (i *Provider) ToProviderPtrOutput() ProviderPtrOutput {
	return i.ToProviderPtrOutputWithContext(context.Background())
}

func (i *Provider) ToProviderPtrOutputWithContext(ctx context.Context) ProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderPtrOutput)
}

type ProviderPtrInput interface {
	pulumi.Input

	ToProviderPtrOutput() ProviderPtrOutput
	ToProviderPtrOutputWithContext(ctx context.Context) ProviderPtrOutput
}

type providerPtrType ProviderArgs

func (*providerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil))
}

func (i *providerPtrType) ToProviderPtrOutput() ProviderPtrOutput {
	return i.ToProviderPtrOutputWithContext(context.Background())
}

func (i *providerPtrType) ToProviderPtrOutputWithContext(ctx context.Context) ProviderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderPtrOutput)
}

type ProviderOutput struct {
	*pulumi.OutputState
}

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Provider)(nil))
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderPtrOutput() ProviderPtrOutput {
	return o.ToProviderPtrOutputWithContext(context.Background())
}

func (o ProviderOutput) ToProviderPtrOutputWithContext(ctx context.Context) ProviderPtrOutput {
	return o.ApplyT(func(v Provider) *Provider {
		return &v
	}).(ProviderPtrOutput)
}

type ProviderPtrOutput struct {
	*pulumi.OutputState
}

func (ProviderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil))
}

func (o ProviderPtrOutput) ToProviderPtrOutput() ProviderPtrOutput {
	return o
}

func (o ProviderPtrOutput) ToProviderPtrOutputWithContext(ctx context.Context) ProviderPtrOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ProviderOutput{})
	pulumi.RegisterOutputType(ProviderPtrOutput{})
}
