# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'BuiltinRoleAssignmentRole',
    'DashboardPermissionPermission',
    'DataSourceJsonData',
    'DataSourceSecureJsonData',
    'FolderPermissionPermission',
    'RolePermission',
]

@pulumi.output_type
class BuiltinRoleAssignmentRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "global":
            suggest = "global_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BuiltinRoleAssignmentRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BuiltinRoleAssignmentRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BuiltinRoleAssignmentRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 uid: str,
                 global_: Optional[bool] = None):
        pulumi.set(__self__, "uid", uid)
        if global_ is not None:
            pulumi.set(__self__, "global_", global_)

    @property
    @pulumi.getter
    def uid(self) -> str:
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter(name="global")
    def global_(self) -> Optional[bool]:
        return pulumi.get(self, "global_")


@pulumi.output_type
class DashboardPermissionPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "teamId":
            suggest = "team_id"
        elif key == "userId":
            suggest = "user_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DashboardPermissionPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DashboardPermissionPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DashboardPermissionPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 permission: str,
                 role: Optional[str] = None,
                 team_id: Optional[int] = None,
                 user_id: Optional[int] = None):
        pulumi.set(__self__, "permission", permission)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if team_id is not None:
            pulumi.set(__self__, "team_id", team_id)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter
    def permission(self) -> str:
        return pulumi.get(self, "permission")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> Optional[int]:
        return pulumi.get(self, "team_id")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[int]:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class DataSourceJsonData(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assumeRoleArn":
            suggest = "assume_role_arn"
        elif key == "authType":
            suggest = "auth_type"
        elif key == "authenticationType":
            suggest = "authentication_type"
        elif key == "clientEmail":
            suggest = "client_email"
        elif key == "connMaxLifetime":
            suggest = "conn_max_lifetime"
        elif key == "customMetricsNamespaces":
            suggest = "custom_metrics_namespaces"
        elif key == "defaultProject":
            suggest = "default_project"
        elif key == "defaultRegion":
            suggest = "default_region"
        elif key == "esVersion":
            suggest = "es_version"
        elif key == "graphiteVersion":
            suggest = "graphite_version"
        elif key == "httpMethod":
            suggest = "http_method"
        elif key == "logLevelField":
            suggest = "log_level_field"
        elif key == "logMessageField":
            suggest = "log_message_field"
        elif key == "maxIdleConns":
            suggest = "max_idle_conns"
        elif key == "maxOpenConns":
            suggest = "max_open_conns"
        elif key == "postgresVersion":
            suggest = "postgres_version"
        elif key == "queryTimeout":
            suggest = "query_timeout"
        elif key == "sslMode":
            suggest = "ssl_mode"
        elif key == "timeField":
            suggest = "time_field"
        elif key == "timeInterval":
            suggest = "time_interval"
        elif key == "tlsAuth":
            suggest = "tls_auth"
        elif key == "tlsAuthWithCaCert":
            suggest = "tls_auth_with_ca_cert"
        elif key == "tlsSkipVerify":
            suggest = "tls_skip_verify"
        elif key == "tokenUri":
            suggest = "token_uri"
        elif key == "tsdbResolution":
            suggest = "tsdb_resolution"
        elif key == "tsdbVersion":
            suggest = "tsdb_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSourceJsonData. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSourceJsonData.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSourceJsonData.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assume_role_arn: Optional[str] = None,
                 auth_type: Optional[str] = None,
                 authentication_type: Optional[str] = None,
                 client_email: Optional[str] = None,
                 conn_max_lifetime: Optional[int] = None,
                 custom_metrics_namespaces: Optional[str] = None,
                 default_project: Optional[str] = None,
                 default_region: Optional[str] = None,
                 encrypt: Optional[str] = None,
                 es_version: Optional[int] = None,
                 graphite_version: Optional[str] = None,
                 http_method: Optional[str] = None,
                 interval: Optional[str] = None,
                 log_level_field: Optional[str] = None,
                 log_message_field: Optional[str] = None,
                 max_idle_conns: Optional[int] = None,
                 max_open_conns: Optional[int] = None,
                 postgres_version: Optional[int] = None,
                 profile: Optional[str] = None,
                 query_timeout: Optional[str] = None,
                 ssl_mode: Optional[str] = None,
                 time_field: Optional[str] = None,
                 time_interval: Optional[str] = None,
                 timescaledb: Optional[bool] = None,
                 tls_auth: Optional[bool] = None,
                 tls_auth_with_ca_cert: Optional[bool] = None,
                 tls_skip_verify: Optional[bool] = None,
                 token_uri: Optional[str] = None,
                 tsdb_resolution: Optional[str] = None,
                 tsdb_version: Optional[str] = None):
        if assume_role_arn is not None:
            pulumi.set(__self__, "assume_role_arn", assume_role_arn)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_email is not None:
            pulumi.set(__self__, "client_email", client_email)
        if conn_max_lifetime is not None:
            pulumi.set(__self__, "conn_max_lifetime", conn_max_lifetime)
        if custom_metrics_namespaces is not None:
            pulumi.set(__self__, "custom_metrics_namespaces", custom_metrics_namespaces)
        if default_project is not None:
            pulumi.set(__self__, "default_project", default_project)
        if default_region is not None:
            pulumi.set(__self__, "default_region", default_region)
        if encrypt is not None:
            pulumi.set(__self__, "encrypt", encrypt)
        if es_version is not None:
            pulumi.set(__self__, "es_version", es_version)
        if graphite_version is not None:
            pulumi.set(__self__, "graphite_version", graphite_version)
        if http_method is not None:
            pulumi.set(__self__, "http_method", http_method)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if log_level_field is not None:
            pulumi.set(__self__, "log_level_field", log_level_field)
        if log_message_field is not None:
            pulumi.set(__self__, "log_message_field", log_message_field)
        if max_idle_conns is not None:
            pulumi.set(__self__, "max_idle_conns", max_idle_conns)
        if max_open_conns is not None:
            pulumi.set(__self__, "max_open_conns", max_open_conns)
        if postgres_version is not None:
            pulumi.set(__self__, "postgres_version", postgres_version)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if query_timeout is not None:
            pulumi.set(__self__, "query_timeout", query_timeout)
        if ssl_mode is not None:
            pulumi.set(__self__, "ssl_mode", ssl_mode)
        if time_field is not None:
            pulumi.set(__self__, "time_field", time_field)
        if time_interval is not None:
            pulumi.set(__self__, "time_interval", time_interval)
        if timescaledb is not None:
            pulumi.set(__self__, "timescaledb", timescaledb)
        if tls_auth is not None:
            pulumi.set(__self__, "tls_auth", tls_auth)
        if tls_auth_with_ca_cert is not None:
            pulumi.set(__self__, "tls_auth_with_ca_cert", tls_auth_with_ca_cert)
        if tls_skip_verify is not None:
            pulumi.set(__self__, "tls_skip_verify", tls_skip_verify)
        if token_uri is not None:
            pulumi.set(__self__, "token_uri", token_uri)
        if tsdb_resolution is not None:
            pulumi.set(__self__, "tsdb_resolution", tsdb_resolution)
        if tsdb_version is not None:
            pulumi.set(__self__, "tsdb_version", tsdb_version)

    @property
    @pulumi.getter(name="assumeRoleArn")
    def assume_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "assume_role_arn")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[str]:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter(name="clientEmail")
    def client_email(self) -> Optional[str]:
        return pulumi.get(self, "client_email")

    @property
    @pulumi.getter(name="connMaxLifetime")
    def conn_max_lifetime(self) -> Optional[int]:
        return pulumi.get(self, "conn_max_lifetime")

    @property
    @pulumi.getter(name="customMetricsNamespaces")
    def custom_metrics_namespaces(self) -> Optional[str]:
        return pulumi.get(self, "custom_metrics_namespaces")

    @property
    @pulumi.getter(name="defaultProject")
    def default_project(self) -> Optional[str]:
        return pulumi.get(self, "default_project")

    @property
    @pulumi.getter(name="defaultRegion")
    def default_region(self) -> Optional[str]:
        return pulumi.get(self, "default_region")

    @property
    @pulumi.getter
    def encrypt(self) -> Optional[str]:
        return pulumi.get(self, "encrypt")

    @property
    @pulumi.getter(name="esVersion")
    def es_version(self) -> Optional[int]:
        return pulumi.get(self, "es_version")

    @property
    @pulumi.getter(name="graphiteVersion")
    def graphite_version(self) -> Optional[str]:
        return pulumi.get(self, "graphite_version")

    @property
    @pulumi.getter(name="httpMethod")
    def http_method(self) -> Optional[str]:
        return pulumi.get(self, "http_method")

    @property
    @pulumi.getter
    def interval(self) -> Optional[str]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="logLevelField")
    def log_level_field(self) -> Optional[str]:
        return pulumi.get(self, "log_level_field")

    @property
    @pulumi.getter(name="logMessageField")
    def log_message_field(self) -> Optional[str]:
        return pulumi.get(self, "log_message_field")

    @property
    @pulumi.getter(name="maxIdleConns")
    def max_idle_conns(self) -> Optional[int]:
        return pulumi.get(self, "max_idle_conns")

    @property
    @pulumi.getter(name="maxOpenConns")
    def max_open_conns(self) -> Optional[int]:
        return pulumi.get(self, "max_open_conns")

    @property
    @pulumi.getter(name="postgresVersion")
    def postgres_version(self) -> Optional[int]:
        return pulumi.get(self, "postgres_version")

    @property
    @pulumi.getter
    def profile(self) -> Optional[str]:
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter(name="queryTimeout")
    def query_timeout(self) -> Optional[str]:
        return pulumi.get(self, "query_timeout")

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> Optional[str]:
        return pulumi.get(self, "ssl_mode")

    @property
    @pulumi.getter(name="timeField")
    def time_field(self) -> Optional[str]:
        return pulumi.get(self, "time_field")

    @property
    @pulumi.getter(name="timeInterval")
    def time_interval(self) -> Optional[str]:
        return pulumi.get(self, "time_interval")

    @property
    @pulumi.getter
    def timescaledb(self) -> Optional[bool]:
        return pulumi.get(self, "timescaledb")

    @property
    @pulumi.getter(name="tlsAuth")
    def tls_auth(self) -> Optional[bool]:
        return pulumi.get(self, "tls_auth")

    @property
    @pulumi.getter(name="tlsAuthWithCaCert")
    def tls_auth_with_ca_cert(self) -> Optional[bool]:
        return pulumi.get(self, "tls_auth_with_ca_cert")

    @property
    @pulumi.getter(name="tlsSkipVerify")
    def tls_skip_verify(self) -> Optional[bool]:
        return pulumi.get(self, "tls_skip_verify")

    @property
    @pulumi.getter(name="tokenUri")
    def token_uri(self) -> Optional[str]:
        return pulumi.get(self, "token_uri")

    @property
    @pulumi.getter(name="tsdbResolution")
    def tsdb_resolution(self) -> Optional[str]:
        return pulumi.get(self, "tsdb_resolution")

    @property
    @pulumi.getter(name="tsdbVersion")
    def tsdb_version(self) -> Optional[str]:
        return pulumi.get(self, "tsdb_version")


@pulumi.output_type
class DataSourceSecureJsonData(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKey":
            suggest = "access_key"
        elif key == "basicAuthPassword":
            suggest = "basic_auth_password"
        elif key == "privateKey":
            suggest = "private_key"
        elif key == "secretKey":
            suggest = "secret_key"
        elif key == "tlsCaCert":
            suggest = "tls_ca_cert"
        elif key == "tlsClientCert":
            suggest = "tls_client_cert"
        elif key == "tlsClientKey":
            suggest = "tls_client_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSourceSecureJsonData. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSourceSecureJsonData.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSourceSecureJsonData.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_key: Optional[str] = None,
                 basic_auth_password: Optional[str] = None,
                 password: Optional[str] = None,
                 private_key: Optional[str] = None,
                 secret_key: Optional[str] = None,
                 tls_ca_cert: Optional[str] = None,
                 tls_client_cert: Optional[str] = None,
                 tls_client_key: Optional[str] = None):
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if basic_auth_password is not None:
            pulumi.set(__self__, "basic_auth_password", basic_auth_password)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if tls_ca_cert is not None:
            pulumi.set(__self__, "tls_ca_cert", tls_ca_cert)
        if tls_client_cert is not None:
            pulumi.set(__self__, "tls_client_cert", tls_client_cert)
        if tls_client_key is not None:
            pulumi.set(__self__, "tls_client_key", tls_client_key)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[str]:
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter(name="basicAuthPassword")
    def basic_auth_password(self) -> Optional[str]:
        return pulumi.get(self, "basic_auth_password")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[str]:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="tlsCaCert")
    def tls_ca_cert(self) -> Optional[str]:
        return pulumi.get(self, "tls_ca_cert")

    @property
    @pulumi.getter(name="tlsClientCert")
    def tls_client_cert(self) -> Optional[str]:
        return pulumi.get(self, "tls_client_cert")

    @property
    @pulumi.getter(name="tlsClientKey")
    def tls_client_key(self) -> Optional[str]:
        return pulumi.get(self, "tls_client_key")


@pulumi.output_type
class FolderPermissionPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "teamId":
            suggest = "team_id"
        elif key == "userId":
            suggest = "user_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FolderPermissionPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FolderPermissionPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FolderPermissionPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 permission: str,
                 role: Optional[str] = None,
                 team_id: Optional[int] = None,
                 user_id: Optional[int] = None):
        pulumi.set(__self__, "permission", permission)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if team_id is not None:
            pulumi.set(__self__, "team_id", team_id)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter
    def permission(self) -> str:
        return pulumi.get(self, "permission")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> Optional[int]:
        return pulumi.get(self, "team_id")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[int]:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class RolePermission(dict):
    def __init__(__self__, *,
                 action: str,
                 scope: Optional[str] = None):
        pulumi.set(__self__, "action", action)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def scope(self) -> Optional[str]:
        return pulumi.get(self, "scope")


