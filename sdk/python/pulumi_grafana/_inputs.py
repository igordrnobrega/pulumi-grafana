# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'BuiltinRoleAssignmentRoleArgs',
    'DashboardPermissionPermissionArgs',
    'DataSourceJsonDataArgs',
    'DataSourceSecureJsonDataArgs',
    'FolderPermissionPermissionArgs',
    'RolePermissionArgs',
]

@pulumi.input_type
class BuiltinRoleAssignmentRoleArgs:
    def __init__(__self__, *,
                 uid: pulumi.Input[str],
                 global_: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "uid", uid)
        if global_ is not None:
            pulumi.set(__self__, "global_", global_)

    @property
    @pulumi.getter
    def uid(self) -> pulumi.Input[str]:
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: pulumi.Input[str]):
        pulumi.set(self, "uid", value)

    @property
    @pulumi.getter(name="global")
    def global_(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "global_")

    @global_.setter
    def global_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "global_", value)


@pulumi.input_type
class DashboardPermissionPermissionArgs:
    def __init__(__self__, *,
                 permission: pulumi.Input[str],
                 role: Optional[pulumi.Input[str]] = None,
                 team_id: Optional[pulumi.Input[int]] = None,
                 user_id: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "permission", permission)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if team_id is not None:
            pulumi.set(__self__, "team_id", team_id)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter
    def permission(self) -> pulumi.Input[str]:
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: pulumi.Input[str]):
        pulumi.set(self, "permission", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "team_id")

    @team_id.setter
    def team_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "team_id", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "user_id", value)


@pulumi.input_type
class DataSourceJsonDataArgs:
    def __init__(__self__, *,
                 assume_role_arn: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 authentication_type: Optional[pulumi.Input[str]] = None,
                 client_email: Optional[pulumi.Input[str]] = None,
                 conn_max_lifetime: Optional[pulumi.Input[int]] = None,
                 custom_metrics_namespaces: Optional[pulumi.Input[str]] = None,
                 default_project: Optional[pulumi.Input[str]] = None,
                 default_region: Optional[pulumi.Input[str]] = None,
                 encrypt: Optional[pulumi.Input[str]] = None,
                 es_version: Optional[pulumi.Input[int]] = None,
                 graphite_version: Optional[pulumi.Input[str]] = None,
                 http_method: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[str]] = None,
                 log_level_field: Optional[pulumi.Input[str]] = None,
                 log_message_field: Optional[pulumi.Input[str]] = None,
                 max_idle_conns: Optional[pulumi.Input[int]] = None,
                 max_open_conns: Optional[pulumi.Input[int]] = None,
                 postgres_version: Optional[pulumi.Input[int]] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 query_timeout: Optional[pulumi.Input[str]] = None,
                 ssl_mode: Optional[pulumi.Input[str]] = None,
                 time_field: Optional[pulumi.Input[str]] = None,
                 time_interval: Optional[pulumi.Input[str]] = None,
                 timescaledb: Optional[pulumi.Input[bool]] = None,
                 tls_auth: Optional[pulumi.Input[bool]] = None,
                 tls_auth_with_ca_cert: Optional[pulumi.Input[bool]] = None,
                 tls_skip_verify: Optional[pulumi.Input[bool]] = None,
                 token_uri: Optional[pulumi.Input[str]] = None,
                 tsdb_resolution: Optional[pulumi.Input[str]] = None,
                 tsdb_version: Optional[pulumi.Input[str]] = None):
        if assume_role_arn is not None:
            pulumi.set(__self__, "assume_role_arn", assume_role_arn)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if client_email is not None:
            pulumi.set(__self__, "client_email", client_email)
        if conn_max_lifetime is not None:
            pulumi.set(__self__, "conn_max_lifetime", conn_max_lifetime)
        if custom_metrics_namespaces is not None:
            pulumi.set(__self__, "custom_metrics_namespaces", custom_metrics_namespaces)
        if default_project is not None:
            pulumi.set(__self__, "default_project", default_project)
        if default_region is not None:
            pulumi.set(__self__, "default_region", default_region)
        if encrypt is not None:
            pulumi.set(__self__, "encrypt", encrypt)
        if es_version is not None:
            pulumi.set(__self__, "es_version", es_version)
        if graphite_version is not None:
            pulumi.set(__self__, "graphite_version", graphite_version)
        if http_method is not None:
            pulumi.set(__self__, "http_method", http_method)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if log_level_field is not None:
            pulumi.set(__self__, "log_level_field", log_level_field)
        if log_message_field is not None:
            pulumi.set(__self__, "log_message_field", log_message_field)
        if max_idle_conns is not None:
            pulumi.set(__self__, "max_idle_conns", max_idle_conns)
        if max_open_conns is not None:
            pulumi.set(__self__, "max_open_conns", max_open_conns)
        if postgres_version is not None:
            pulumi.set(__self__, "postgres_version", postgres_version)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if query_timeout is not None:
            pulumi.set(__self__, "query_timeout", query_timeout)
        if ssl_mode is not None:
            pulumi.set(__self__, "ssl_mode", ssl_mode)
        if time_field is not None:
            pulumi.set(__self__, "time_field", time_field)
        if time_interval is not None:
            pulumi.set(__self__, "time_interval", time_interval)
        if timescaledb is not None:
            pulumi.set(__self__, "timescaledb", timescaledb)
        if tls_auth is not None:
            pulumi.set(__self__, "tls_auth", tls_auth)
        if tls_auth_with_ca_cert is not None:
            pulumi.set(__self__, "tls_auth_with_ca_cert", tls_auth_with_ca_cert)
        if tls_skip_verify is not None:
            pulumi.set(__self__, "tls_skip_verify", tls_skip_verify)
        if token_uri is not None:
            pulumi.set(__self__, "token_uri", token_uri)
        if tsdb_resolution is not None:
            pulumi.set(__self__, "tsdb_resolution", tsdb_resolution)
        if tsdb_version is not None:
            pulumi.set(__self__, "tsdb_version", tsdb_version)

    @property
    @pulumi.getter(name="assumeRoleArn")
    def assume_role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assume_role_arn")

    @assume_role_arn.setter
    def assume_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assume_role_arn", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="clientEmail")
    def client_email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_email")

    @client_email.setter
    def client_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_email", value)

    @property
    @pulumi.getter(name="connMaxLifetime")
    def conn_max_lifetime(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "conn_max_lifetime")

    @conn_max_lifetime.setter
    def conn_max_lifetime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conn_max_lifetime", value)

    @property
    @pulumi.getter(name="customMetricsNamespaces")
    def custom_metrics_namespaces(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_metrics_namespaces")

    @custom_metrics_namespaces.setter
    def custom_metrics_namespaces(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_metrics_namespaces", value)

    @property
    @pulumi.getter(name="defaultProject")
    def default_project(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_project")

    @default_project.setter
    def default_project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_project", value)

    @property
    @pulumi.getter(name="defaultRegion")
    def default_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_region")

    @default_region.setter
    def default_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_region", value)

    @property
    @pulumi.getter
    def encrypt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encrypt")

    @encrypt.setter
    def encrypt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encrypt", value)

    @property
    @pulumi.getter(name="esVersion")
    def es_version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "es_version")

    @es_version.setter
    def es_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "es_version", value)

    @property
    @pulumi.getter(name="graphiteVersion")
    def graphite_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "graphite_version")

    @graphite_version.setter
    def graphite_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "graphite_version", value)

    @property
    @pulumi.getter(name="httpMethod")
    def http_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_method")

    @http_method.setter
    def http_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_method", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="logLevelField")
    def log_level_field(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_level_field")

    @log_level_field.setter
    def log_level_field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_level_field", value)

    @property
    @pulumi.getter(name="logMessageField")
    def log_message_field(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_message_field")

    @log_message_field.setter
    def log_message_field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_message_field", value)

    @property
    @pulumi.getter(name="maxIdleConns")
    def max_idle_conns(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_idle_conns")

    @max_idle_conns.setter
    def max_idle_conns(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_idle_conns", value)

    @property
    @pulumi.getter(name="maxOpenConns")
    def max_open_conns(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_open_conns")

    @max_open_conns.setter
    def max_open_conns(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_open_conns", value)

    @property
    @pulumi.getter(name="postgresVersion")
    def postgres_version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "postgres_version")

    @postgres_version.setter
    def postgres_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "postgres_version", value)

    @property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile", value)

    @property
    @pulumi.getter(name="queryTimeout")
    def query_timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_timeout")

    @query_timeout.setter
    def query_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_timeout", value)

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_mode")

    @ssl_mode.setter
    def ssl_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_mode", value)

    @property
    @pulumi.getter(name="timeField")
    def time_field(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_field")

    @time_field.setter
    def time_field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_field", value)

    @property
    @pulumi.getter(name="timeInterval")
    def time_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_interval")

    @time_interval.setter
    def time_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_interval", value)

    @property
    @pulumi.getter
    def timescaledb(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "timescaledb")

    @timescaledb.setter
    def timescaledb(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timescaledb", value)

    @property
    @pulumi.getter(name="tlsAuth")
    def tls_auth(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "tls_auth")

    @tls_auth.setter
    def tls_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls_auth", value)

    @property
    @pulumi.getter(name="tlsAuthWithCaCert")
    def tls_auth_with_ca_cert(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "tls_auth_with_ca_cert")

    @tls_auth_with_ca_cert.setter
    def tls_auth_with_ca_cert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls_auth_with_ca_cert", value)

    @property
    @pulumi.getter(name="tlsSkipVerify")
    def tls_skip_verify(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "tls_skip_verify")

    @tls_skip_verify.setter
    def tls_skip_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls_skip_verify", value)

    @property
    @pulumi.getter(name="tokenUri")
    def token_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token_uri")

    @token_uri.setter
    def token_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_uri", value)

    @property
    @pulumi.getter(name="tsdbResolution")
    def tsdb_resolution(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tsdb_resolution")

    @tsdb_resolution.setter
    def tsdb_resolution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tsdb_resolution", value)

    @property
    @pulumi.getter(name="tsdbVersion")
    def tsdb_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tsdb_version")

    @tsdb_version.setter
    def tsdb_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tsdb_version", value)


@pulumi.input_type
class DataSourceSecureJsonDataArgs:
    def __init__(__self__, *,
                 access_key: Optional[pulumi.Input[str]] = None,
                 basic_auth_password: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None,
                 tls_ca_cert: Optional[pulumi.Input[str]] = None,
                 tls_client_cert: Optional[pulumi.Input[str]] = None,
                 tls_client_key: Optional[pulumi.Input[str]] = None):
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if basic_auth_password is not None:
            pulumi.set(__self__, "basic_auth_password", basic_auth_password)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if tls_ca_cert is not None:
            pulumi.set(__self__, "tls_ca_cert", tls_ca_cert)
        if tls_client_cert is not None:
            pulumi.set(__self__, "tls_client_cert", tls_client_cert)
        if tls_client_key is not None:
            pulumi.set(__self__, "tls_client_key", tls_client_key)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="basicAuthPassword")
    def basic_auth_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "basic_auth_password")

    @basic_auth_password.setter
    def basic_auth_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "basic_auth_password", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="tlsCaCert")
    def tls_ca_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_ca_cert")

    @tls_ca_cert.setter
    def tls_ca_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_ca_cert", value)

    @property
    @pulumi.getter(name="tlsClientCert")
    def tls_client_cert(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_client_cert")

    @tls_client_cert.setter
    def tls_client_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_client_cert", value)

    @property
    @pulumi.getter(name="tlsClientKey")
    def tls_client_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_client_key")

    @tls_client_key.setter
    def tls_client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_client_key", value)


@pulumi.input_type
class FolderPermissionPermissionArgs:
    def __init__(__self__, *,
                 permission: pulumi.Input[str],
                 role: Optional[pulumi.Input[str]] = None,
                 team_id: Optional[pulumi.Input[int]] = None,
                 user_id: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "permission", permission)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if team_id is not None:
            pulumi.set(__self__, "team_id", team_id)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter
    def permission(self) -> pulumi.Input[str]:
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: pulumi.Input[str]):
        pulumi.set(self, "permission", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "team_id")

    @team_id.setter
    def team_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "team_id", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "user_id", value)


@pulumi.input_type
class RolePermissionArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 scope: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "action", action)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)


